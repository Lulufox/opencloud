name: Deploy to YC

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  create_project_directory:
    name: Infra
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Create projects directory
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          set -e
          sudo rm -rf opencloud || true
          sudo mkdir -p opencloud/{config,data,infra}
          sudo chown -R 1000:1000 opencloud
          sudo chmod -R 755 opencloud
    
    - name: Upgrade Docker
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

  deploy:
    runs-on: ubuntu-latest
    needs:
      - create_project_directory
    outputs:
      container_status: ${{ steps.get_status.outputs.status }}
    steps:
    - uses: actions/checkout@v3 
    - name: Copy compose files
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        source: "deployments/examples/opencloud_full/docker-compose.yml"
        target: "opencloud/"
        strip_components: 3
    
    - name: Deploy containers
      uses: appleboy/ssh-action@master
      with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            cd opencloud
            
            # Cleanup containers
            if [ "$(sudo docker ps -q)" ]; then
                sudo docker stop $(sudo docker ps -q)
            fi
            
            if [ "$(sudo docker ps -aq --filter status=exited)" ]; then
                sudo docker rm -v $(sudo docker ps -aq --filter status=exited)
            fi
            
            # Cleanup unused images
            sudo docker image prune -af || true

            if [ ! -f "docker-compose.yml" ]; then
                echo "::error::docker-compose.yml not found in repository!"
                exit 1
            fi
            
            sudo docker-compose pull
            sudo docker-compose up -d --build

    - name: Get container status
      id: get_status
      run: |
        sleep 15s
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        status=$(ssh -o StrictHostKeyChecking=no \
        -i ~/.ssh/deploy_key \
        ${{ secrets.USER }}@${{ secrets.HOST }} \
        "sudo docker ps -a --format 'table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Ports}}'")
        
        # Format the output with proper line breaks
        formatted_status=$(echo "$status" | awk 'NR>1 {print $0}' | sed 's/%0A/\n/g')
        echo "status<<EOF" >> $GITHUB_OUTPUT
        echo "$formatted_status" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        format: markdown
        message: |
          *${{ github.workflow }}*
          Репозиторий: \`${{ github.repository }}\`
          
          ```
          ${{ needs.deploy.outputs.container_status || 'Не удалось получить статус' }}
          ```
          