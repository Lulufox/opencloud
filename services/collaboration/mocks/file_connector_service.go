// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"io"

	"github.com/opencloud-eu/opencloud/services/collaboration/pkg/connector"
	mock "github.com/stretchr/testify/mock"
)

// NewFileConnectorService creates a new instance of FileConnectorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileConnectorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileConnectorService {
	mock := &FileConnectorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FileConnectorService is an autogenerated mock type for the FileConnectorService type
type FileConnectorService struct {
	mock.Mock
}

type FileConnectorService_Expecter struct {
	mock *mock.Mock
}

func (_m *FileConnectorService) EXPECT() *FileConnectorService_Expecter {
	return &FileConnectorService_Expecter{mock: &_m.Mock}
}

// CheckFileInfo provides a mock function for the type FileConnectorService
func (_mock *FileConnectorService) CheckFileInfo(ctx context.Context) (*connector.ConnectorResponse, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckFileInfo")
	}

	var r0 *connector.ConnectorResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*connector.ConnectorResponse, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *connector.ConnectorResponse); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connector.ConnectorResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FileConnectorService_CheckFileInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckFileInfo'
type FileConnectorService_CheckFileInfo_Call struct {
	*mock.Call
}

// CheckFileInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FileConnectorService_Expecter) CheckFileInfo(ctx interface{}) *FileConnectorService_CheckFileInfo_Call {
	return &FileConnectorService_CheckFileInfo_Call{Call: _e.mock.On("CheckFileInfo", ctx)}
}

func (_c *FileConnectorService_CheckFileInfo_Call) Run(run func(ctx context.Context)) *FileConnectorService_CheckFileInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FileConnectorService_CheckFileInfo_Call) Return(connectorResponse *connector.ConnectorResponse, err error) *FileConnectorService_CheckFileInfo_Call {
	_c.Call.Return(connectorResponse, err)
	return _c
}

func (_c *FileConnectorService_CheckFileInfo_Call) RunAndReturn(run func(ctx context.Context) (*connector.ConnectorResponse, error)) *FileConnectorService_CheckFileInfo_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFile provides a mock function for the type FileConnectorService
func (_mock *FileConnectorService) DeleteFile(ctx context.Context, lockID string) (*connector.ConnectorResponse, error) {
	ret := _mock.Called(ctx, lockID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 *connector.ConnectorResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*connector.ConnectorResponse, error)); ok {
		return returnFunc(ctx, lockID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *connector.ConnectorResponse); ok {
		r0 = returnFunc(ctx, lockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connector.ConnectorResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, lockID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FileConnectorService_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type FileConnectorService_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - ctx context.Context
//   - lockID string
func (_e *FileConnectorService_Expecter) DeleteFile(ctx interface{}, lockID interface{}) *FileConnectorService_DeleteFile_Call {
	return &FileConnectorService_DeleteFile_Call{Call: _e.mock.On("DeleteFile", ctx, lockID)}
}

func (_c *FileConnectorService_DeleteFile_Call) Run(run func(ctx context.Context, lockID string)) *FileConnectorService_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FileConnectorService_DeleteFile_Call) Return(connectorResponse *connector.ConnectorResponse, err error) *FileConnectorService_DeleteFile_Call {
	_c.Call.Return(connectorResponse, err)
	return _c
}

func (_c *FileConnectorService_DeleteFile_Call) RunAndReturn(run func(ctx context.Context, lockID string) (*connector.ConnectorResponse, error)) *FileConnectorService_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetLock provides a mock function for the type FileConnectorService
func (_mock *FileConnectorService) GetLock(ctx context.Context) (*connector.ConnectorResponse, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLock")
	}

	var r0 *connector.ConnectorResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*connector.ConnectorResponse, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *connector.ConnectorResponse); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connector.ConnectorResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FileConnectorService_GetLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLock'
type FileConnectorService_GetLock_Call struct {
	*mock.Call
}

// GetLock is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FileConnectorService_Expecter) GetLock(ctx interface{}) *FileConnectorService_GetLock_Call {
	return &FileConnectorService_GetLock_Call{Call: _e.mock.On("GetLock", ctx)}
}

func (_c *FileConnectorService_GetLock_Call) Run(run func(ctx context.Context)) *FileConnectorService_GetLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FileConnectorService_GetLock_Call) Return(connectorResponse *connector.ConnectorResponse, err error) *FileConnectorService_GetLock_Call {
	_c.Call.Return(connectorResponse, err)
	return _c
}

func (_c *FileConnectorService_GetLock_Call) RunAndReturn(run func(ctx context.Context) (*connector.ConnectorResponse, error)) *FileConnectorService_GetLock_Call {
	_c.Call.Return(run)
	return _c
}

// Lock provides a mock function for the type FileConnectorService
func (_mock *FileConnectorService) Lock(ctx context.Context, lockID string, oldLockID string) (*connector.ConnectorResponse, error) {
	ret := _mock.Called(ctx, lockID, oldLockID)

	if len(ret) == 0 {
		panic("no return value specified for Lock")
	}

	var r0 *connector.ConnectorResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*connector.ConnectorResponse, error)); ok {
		return returnFunc(ctx, lockID, oldLockID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *connector.ConnectorResponse); ok {
		r0 = returnFunc(ctx, lockID, oldLockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connector.ConnectorResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, lockID, oldLockID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FileConnectorService_Lock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lock'
type FileConnectorService_Lock_Call struct {
	*mock.Call
}

// Lock is a helper method to define mock.On call
//   - ctx context.Context
//   - lockID string
//   - oldLockID string
func (_e *FileConnectorService_Expecter) Lock(ctx interface{}, lockID interface{}, oldLockID interface{}) *FileConnectorService_Lock_Call {
	return &FileConnectorService_Lock_Call{Call: _e.mock.On("Lock", ctx, lockID, oldLockID)}
}

func (_c *FileConnectorService_Lock_Call) Run(run func(ctx context.Context, lockID string, oldLockID string)) *FileConnectorService_Lock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *FileConnectorService_Lock_Call) Return(connectorResponse *connector.ConnectorResponse, err error) *FileConnectorService_Lock_Call {
	_c.Call.Return(connectorResponse, err)
	return _c
}

func (_c *FileConnectorService_Lock_Call) RunAndReturn(run func(ctx context.Context, lockID string, oldLockID string) (*connector.ConnectorResponse, error)) *FileConnectorService_Lock_Call {
	_c.Call.Return(run)
	return _c
}

// PutRelativeFileRelative provides a mock function for the type FileConnectorService
func (_mock *FileConnectorService) PutRelativeFileRelative(ctx context.Context, ccs connector.ContentConnectorService, stream io.Reader, streamLength int64, target string) (*connector.ConnectorResponse, error) {
	ret := _mock.Called(ctx, ccs, stream, streamLength, target)

	if len(ret) == 0 {
		panic("no return value specified for PutRelativeFileRelative")
	}

	var r0 *connector.ConnectorResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, connector.ContentConnectorService, io.Reader, int64, string) (*connector.ConnectorResponse, error)); ok {
		return returnFunc(ctx, ccs, stream, streamLength, target)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, connector.ContentConnectorService, io.Reader, int64, string) *connector.ConnectorResponse); ok {
		r0 = returnFunc(ctx, ccs, stream, streamLength, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connector.ConnectorResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, connector.ContentConnectorService, io.Reader, int64, string) error); ok {
		r1 = returnFunc(ctx, ccs, stream, streamLength, target)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FileConnectorService_PutRelativeFileRelative_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRelativeFileRelative'
type FileConnectorService_PutRelativeFileRelative_Call struct {
	*mock.Call
}

// PutRelativeFileRelative is a helper method to define mock.On call
//   - ctx context.Context
//   - ccs connector.ContentConnectorService
//   - stream io.Reader
//   - streamLength int64
//   - target string
func (_e *FileConnectorService_Expecter) PutRelativeFileRelative(ctx interface{}, ccs interface{}, stream interface{}, streamLength interface{}, target interface{}) *FileConnectorService_PutRelativeFileRelative_Call {
	return &FileConnectorService_PutRelativeFileRelative_Call{Call: _e.mock.On("PutRelativeFileRelative", ctx, ccs, stream, streamLength, target)}
}

func (_c *FileConnectorService_PutRelativeFileRelative_Call) Run(run func(ctx context.Context, ccs connector.ContentConnectorService, stream io.Reader, streamLength int64, target string)) *FileConnectorService_PutRelativeFileRelative_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 connector.ContentConnectorService
		if args[1] != nil {
			arg1 = args[1].(connector.ContentConnectorService)
		}
		var arg2 io.Reader
		if args[2] != nil {
			arg2 = args[2].(io.Reader)
		}
		var arg3 int64
		if args[3] != nil {
			arg3 = args[3].(int64)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *FileConnectorService_PutRelativeFileRelative_Call) Return(connectorResponse *connector.ConnectorResponse, err error) *FileConnectorService_PutRelativeFileRelative_Call {
	_c.Call.Return(connectorResponse, err)
	return _c
}

func (_c *FileConnectorService_PutRelativeFileRelative_Call) RunAndReturn(run func(ctx context.Context, ccs connector.ContentConnectorService, stream io.Reader, streamLength int64, target string) (*connector.ConnectorResponse, error)) *FileConnectorService_PutRelativeFileRelative_Call {
	_c.Call.Return(run)
	return _c
}

// PutRelativeFileSuggested provides a mock function for the type FileConnectorService
func (_mock *FileConnectorService) PutRelativeFileSuggested(ctx context.Context, ccs connector.ContentConnectorService, stream io.Reader, streamLength int64, target string) (*connector.ConnectorResponse, error) {
	ret := _mock.Called(ctx, ccs, stream, streamLength, target)

	if len(ret) == 0 {
		panic("no return value specified for PutRelativeFileSuggested")
	}

	var r0 *connector.ConnectorResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, connector.ContentConnectorService, io.Reader, int64, string) (*connector.ConnectorResponse, error)); ok {
		return returnFunc(ctx, ccs, stream, streamLength, target)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, connector.ContentConnectorService, io.Reader, int64, string) *connector.ConnectorResponse); ok {
		r0 = returnFunc(ctx, ccs, stream, streamLength, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connector.ConnectorResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, connector.ContentConnectorService, io.Reader, int64, string) error); ok {
		r1 = returnFunc(ctx, ccs, stream, streamLength, target)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FileConnectorService_PutRelativeFileSuggested_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRelativeFileSuggested'
type FileConnectorService_PutRelativeFileSuggested_Call struct {
	*mock.Call
}

// PutRelativeFileSuggested is a helper method to define mock.On call
//   - ctx context.Context
//   - ccs connector.ContentConnectorService
//   - stream io.Reader
//   - streamLength int64
//   - target string
func (_e *FileConnectorService_Expecter) PutRelativeFileSuggested(ctx interface{}, ccs interface{}, stream interface{}, streamLength interface{}, target interface{}) *FileConnectorService_PutRelativeFileSuggested_Call {
	return &FileConnectorService_PutRelativeFileSuggested_Call{Call: _e.mock.On("PutRelativeFileSuggested", ctx, ccs, stream, streamLength, target)}
}

func (_c *FileConnectorService_PutRelativeFileSuggested_Call) Run(run func(ctx context.Context, ccs connector.ContentConnectorService, stream io.Reader, streamLength int64, target string)) *FileConnectorService_PutRelativeFileSuggested_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 connector.ContentConnectorService
		if args[1] != nil {
			arg1 = args[1].(connector.ContentConnectorService)
		}
		var arg2 io.Reader
		if args[2] != nil {
			arg2 = args[2].(io.Reader)
		}
		var arg3 int64
		if args[3] != nil {
			arg3 = args[3].(int64)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *FileConnectorService_PutRelativeFileSuggested_Call) Return(connectorResponse *connector.ConnectorResponse, err error) *FileConnectorService_PutRelativeFileSuggested_Call {
	_c.Call.Return(connectorResponse, err)
	return _c
}

func (_c *FileConnectorService_PutRelativeFileSuggested_Call) RunAndReturn(run func(ctx context.Context, ccs connector.ContentConnectorService, stream io.Reader, streamLength int64, target string) (*connector.ConnectorResponse, error)) *FileConnectorService_PutRelativeFileSuggested_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshLock provides a mock function for the type FileConnectorService
func (_mock *FileConnectorService) RefreshLock(ctx context.Context, lockID string) (*connector.ConnectorResponse, error) {
	ret := _mock.Called(ctx, lockID)

	if len(ret) == 0 {
		panic("no return value specified for RefreshLock")
	}

	var r0 *connector.ConnectorResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*connector.ConnectorResponse, error)); ok {
		return returnFunc(ctx, lockID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *connector.ConnectorResponse); ok {
		r0 = returnFunc(ctx, lockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connector.ConnectorResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, lockID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FileConnectorService_RefreshLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshLock'
type FileConnectorService_RefreshLock_Call struct {
	*mock.Call
}

// RefreshLock is a helper method to define mock.On call
//   - ctx context.Context
//   - lockID string
func (_e *FileConnectorService_Expecter) RefreshLock(ctx interface{}, lockID interface{}) *FileConnectorService_RefreshLock_Call {
	return &FileConnectorService_RefreshLock_Call{Call: _e.mock.On("RefreshLock", ctx, lockID)}
}

func (_c *FileConnectorService_RefreshLock_Call) Run(run func(ctx context.Context, lockID string)) *FileConnectorService_RefreshLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FileConnectorService_RefreshLock_Call) Return(connectorResponse *connector.ConnectorResponse, err error) *FileConnectorService_RefreshLock_Call {
	_c.Call.Return(connectorResponse, err)
	return _c
}

func (_c *FileConnectorService_RefreshLock_Call) RunAndReturn(run func(ctx context.Context, lockID string) (*connector.ConnectorResponse, error)) *FileConnectorService_RefreshLock_Call {
	_c.Call.Return(run)
	return _c
}

// RenameFile provides a mock function for the type FileConnectorService
func (_mock *FileConnectorService) RenameFile(ctx context.Context, lockID string, target string) (*connector.ConnectorResponse, error) {
	ret := _mock.Called(ctx, lockID, target)

	if len(ret) == 0 {
		panic("no return value specified for RenameFile")
	}

	var r0 *connector.ConnectorResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*connector.ConnectorResponse, error)); ok {
		return returnFunc(ctx, lockID, target)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *connector.ConnectorResponse); ok {
		r0 = returnFunc(ctx, lockID, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connector.ConnectorResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, lockID, target)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FileConnectorService_RenameFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameFile'
type FileConnectorService_RenameFile_Call struct {
	*mock.Call
}

// RenameFile is a helper method to define mock.On call
//   - ctx context.Context
//   - lockID string
//   - target string
func (_e *FileConnectorService_Expecter) RenameFile(ctx interface{}, lockID interface{}, target interface{}) *FileConnectorService_RenameFile_Call {
	return &FileConnectorService_RenameFile_Call{Call: _e.mock.On("RenameFile", ctx, lockID, target)}
}

func (_c *FileConnectorService_RenameFile_Call) Run(run func(ctx context.Context, lockID string, target string)) *FileConnectorService_RenameFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *FileConnectorService_RenameFile_Call) Return(connectorResponse *connector.ConnectorResponse, err error) *FileConnectorService_RenameFile_Call {
	_c.Call.Return(connectorResponse, err)
	return _c
}

func (_c *FileConnectorService_RenameFile_Call) RunAndReturn(run func(ctx context.Context, lockID string, target string) (*connector.ConnectorResponse, error)) *FileConnectorService_RenameFile_Call {
	_c.Call.Return(run)
	return _c
}

// UnLock provides a mock function for the type FileConnectorService
func (_mock *FileConnectorService) UnLock(ctx context.Context, lockID string) (*connector.ConnectorResponse, error) {
	ret := _mock.Called(ctx, lockID)

	if len(ret) == 0 {
		panic("no return value specified for UnLock")
	}

	var r0 *connector.ConnectorResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*connector.ConnectorResponse, error)); ok {
		return returnFunc(ctx, lockID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *connector.ConnectorResponse); ok {
		r0 = returnFunc(ctx, lockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connector.ConnectorResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, lockID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FileConnectorService_UnLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnLock'
type FileConnectorService_UnLock_Call struct {
	*mock.Call
}

// UnLock is a helper method to define mock.On call
//   - ctx context.Context
//   - lockID string
func (_e *FileConnectorService_Expecter) UnLock(ctx interface{}, lockID interface{}) *FileConnectorService_UnLock_Call {
	return &FileConnectorService_UnLock_Call{Call: _e.mock.On("UnLock", ctx, lockID)}
}

func (_c *FileConnectorService_UnLock_Call) Run(run func(ctx context.Context, lockID string)) *FileConnectorService_UnLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FileConnectorService_UnLock_Call) Return(connectorResponse *connector.ConnectorResponse, err error) *FileConnectorService_UnLock_Call {
	_c.Call.Return(connectorResponse, err)
	return _c
}

func (_c *FileConnectorService_UnLock_Call) RunAndReturn(run func(ctx context.Context, lockID string) (*connector.ConnectorResponse, error)) *FileConnectorService_UnLock_Call {
	_c.Call.Return(run)
	return _c
}
