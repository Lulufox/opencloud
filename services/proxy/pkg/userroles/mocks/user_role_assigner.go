// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/cs3org/go-cs3apis/cs3/identity/user/v1beta1"
	mock "github.com/stretchr/testify/mock"
)

// NewUserRoleAssigner creates a new instance of UserRoleAssigner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRoleAssigner(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRoleAssigner {
	mock := &UserRoleAssigner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UserRoleAssigner is an autogenerated mock type for the UserRoleAssigner type
type UserRoleAssigner struct {
	mock.Mock
}

type UserRoleAssigner_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRoleAssigner) EXPECT() *UserRoleAssigner_Expecter {
	return &UserRoleAssigner_Expecter{mock: &_m.Mock}
}

// ApplyUserRole provides a mock function for the type UserRoleAssigner
func (_mock *UserRoleAssigner) ApplyUserRole(ctx context.Context, user *userv1beta1.User) (*userv1beta1.User, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for ApplyUserRole")
	}

	var r0 *userv1beta1.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *userv1beta1.User) (*userv1beta1.User, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *userv1beta1.User) *userv1beta1.User); ok {
		r0 = returnFunc(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userv1beta1.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *userv1beta1.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRoleAssigner_ApplyUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyUserRole'
type UserRoleAssigner_ApplyUserRole_Call struct {
	*mock.Call
}

// ApplyUserRole is a helper method to define mock.On call
//   - ctx context.Context
//   - user *userv1beta1.User
func (_e *UserRoleAssigner_Expecter) ApplyUserRole(ctx interface{}, user interface{}) *UserRoleAssigner_ApplyUserRole_Call {
	return &UserRoleAssigner_ApplyUserRole_Call{Call: _e.mock.On("ApplyUserRole", ctx, user)}
}

func (_c *UserRoleAssigner_ApplyUserRole_Call) Run(run func(ctx context.Context, user *userv1beta1.User)) *UserRoleAssigner_ApplyUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *userv1beta1.User
		if args[1] != nil {
			arg1 = args[1].(*userv1beta1.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRoleAssigner_ApplyUserRole_Call) Return(user1 *userv1beta1.User, err error) *UserRoleAssigner_ApplyUserRole_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *UserRoleAssigner_ApplyUserRole_Call) RunAndReturn(run func(ctx context.Context, user *userv1beta1.User) (*userv1beta1.User, error)) *UserRoleAssigner_ApplyUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserRoleAssignment provides a mock function for the type UserRoleAssigner
func (_mock *UserRoleAssigner) UpdateUserRoleAssignment(ctx context.Context, user *userv1beta1.User, claims map[string]interface{}) (*userv1beta1.User, error) {
	ret := _mock.Called(ctx, user, claims)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserRoleAssignment")
	}

	var r0 *userv1beta1.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *userv1beta1.User, map[string]interface{}) (*userv1beta1.User, error)); ok {
		return returnFunc(ctx, user, claims)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *userv1beta1.User, map[string]interface{}) *userv1beta1.User); ok {
		r0 = returnFunc(ctx, user, claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userv1beta1.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *userv1beta1.User, map[string]interface{}) error); ok {
		r1 = returnFunc(ctx, user, claims)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRoleAssigner_UpdateUserRoleAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserRoleAssignment'
type UserRoleAssigner_UpdateUserRoleAssignment_Call struct {
	*mock.Call
}

// UpdateUserRoleAssignment is a helper method to define mock.On call
//   - ctx context.Context
//   - user *userv1beta1.User
//   - claims map[string]interface{}
func (_e *UserRoleAssigner_Expecter) UpdateUserRoleAssignment(ctx interface{}, user interface{}, claims interface{}) *UserRoleAssigner_UpdateUserRoleAssignment_Call {
	return &UserRoleAssigner_UpdateUserRoleAssignment_Call{Call: _e.mock.On("UpdateUserRoleAssignment", ctx, user, claims)}
}

func (_c *UserRoleAssigner_UpdateUserRoleAssignment_Call) Run(run func(ctx context.Context, user *userv1beta1.User, claims map[string]interface{})) *UserRoleAssigner_UpdateUserRoleAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *userv1beta1.User
		if args[1] != nil {
			arg1 = args[1].(*userv1beta1.User)
		}
		var arg2 map[string]interface{}
		if args[2] != nil {
			arg2 = args[2].(map[string]interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *UserRoleAssigner_UpdateUserRoleAssignment_Call) Return(user1 *userv1beta1.User, err error) *UserRoleAssigner_UpdateUserRoleAssignment_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *UserRoleAssigner_UpdateUserRoleAssignment_Call) RunAndReturn(run func(ctx context.Context, user *userv1beta1.User, claims map[string]interface{}) (*userv1beta1.User, error)) *UserRoleAssigner_UpdateUserRoleAssignment_Call {
	_c.Call.Return(run)
	return _c
}
