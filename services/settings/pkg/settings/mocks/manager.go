// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/opencloud-eu/opencloud/protogen/gen/opencloud/messages/settings/v0"
	mock "github.com/stretchr/testify/mock"
)

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

type Manager_Expecter struct {
	mock *mock.Mock
}

func (_m *Manager) EXPECT() *Manager_Expecter {
	return &Manager_Expecter{mock: &_m.Mock}
}

// AddSettingToBundle provides a mock function for the type Manager
func (_mock *Manager) AddSettingToBundle(bundleID string, setting *v0.Setting) (*v0.Setting, error) {
	ret := _mock.Called(bundleID, setting)

	if len(ret) == 0 {
		panic("no return value specified for AddSettingToBundle")
	}

	var r0 *v0.Setting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, *v0.Setting) (*v0.Setting, error)); ok {
		return returnFunc(bundleID, setting)
	}
	if returnFunc, ok := ret.Get(0).(func(string, *v0.Setting) *v0.Setting); ok {
		r0 = returnFunc(bundleID, setting)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.Setting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, *v0.Setting) error); ok {
		r1 = returnFunc(bundleID, setting)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Manager_AddSettingToBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSettingToBundle'
type Manager_AddSettingToBundle_Call struct {
	*mock.Call
}

// AddSettingToBundle is a helper method to define mock.On call
//   - bundleID string
//   - setting *v0.Setting
func (_e *Manager_Expecter) AddSettingToBundle(bundleID interface{}, setting interface{}) *Manager_AddSettingToBundle_Call {
	return &Manager_AddSettingToBundle_Call{Call: _e.mock.On("AddSettingToBundle", bundleID, setting)}
}

func (_c *Manager_AddSettingToBundle_Call) Run(run func(bundleID string, setting *v0.Setting)) *Manager_AddSettingToBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *v0.Setting
		if args[1] != nil {
			arg1 = args[1].(*v0.Setting)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Manager_AddSettingToBundle_Call) Return(setting1 *v0.Setting, err error) *Manager_AddSettingToBundle_Call {
	_c.Call.Return(setting1, err)
	return _c
}

func (_c *Manager_AddSettingToBundle_Call) RunAndReturn(run func(bundleID string, setting *v0.Setting) (*v0.Setting, error)) *Manager_AddSettingToBundle_Call {
	_c.Call.Return(run)
	return _c
}

// ListBundles provides a mock function for the type Manager
func (_mock *Manager) ListBundles(bundleType v0.Bundle_Type, bundleIDs []string) ([]*v0.Bundle, error) {
	ret := _mock.Called(bundleType, bundleIDs)

	if len(ret) == 0 {
		panic("no return value specified for ListBundles")
	}

	var r0 []*v0.Bundle
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(v0.Bundle_Type, []string) ([]*v0.Bundle, error)); ok {
		return returnFunc(bundleType, bundleIDs)
	}
	if returnFunc, ok := ret.Get(0).(func(v0.Bundle_Type, []string) []*v0.Bundle); ok {
		r0 = returnFunc(bundleType, bundleIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v0.Bundle)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(v0.Bundle_Type, []string) error); ok {
		r1 = returnFunc(bundleType, bundleIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Manager_ListBundles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBundles'
type Manager_ListBundles_Call struct {
	*mock.Call
}

// ListBundles is a helper method to define mock.On call
//   - bundleType v0.Bundle_Type
//   - bundleIDs []string
func (_e *Manager_Expecter) ListBundles(bundleType interface{}, bundleIDs interface{}) *Manager_ListBundles_Call {
	return &Manager_ListBundles_Call{Call: _e.mock.On("ListBundles", bundleType, bundleIDs)}
}

func (_c *Manager_ListBundles_Call) Run(run func(bundleType v0.Bundle_Type, bundleIDs []string)) *Manager_ListBundles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 v0.Bundle_Type
		if args[0] != nil {
			arg0 = args[0].(v0.Bundle_Type)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Manager_ListBundles_Call) Return(bundles []*v0.Bundle, err error) *Manager_ListBundles_Call {
	_c.Call.Return(bundles, err)
	return _c
}

func (_c *Manager_ListBundles_Call) RunAndReturn(run func(bundleType v0.Bundle_Type, bundleIDs []string) ([]*v0.Bundle, error)) *Manager_ListBundles_Call {
	_c.Call.Return(run)
	return _c
}

// ListPermissionsByResource provides a mock function for the type Manager
func (_mock *Manager) ListPermissionsByResource(resource *v0.Resource, roleIDs []string) ([]*v0.Permission, error) {
	ret := _mock.Called(resource, roleIDs)

	if len(ret) == 0 {
		panic("no return value specified for ListPermissionsByResource")
	}

	var r0 []*v0.Permission
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*v0.Resource, []string) ([]*v0.Permission, error)); ok {
		return returnFunc(resource, roleIDs)
	}
	if returnFunc, ok := ret.Get(0).(func(*v0.Resource, []string) []*v0.Permission); ok {
		r0 = returnFunc(resource, roleIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v0.Permission)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*v0.Resource, []string) error); ok {
		r1 = returnFunc(resource, roleIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Manager_ListPermissionsByResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPermissionsByResource'
type Manager_ListPermissionsByResource_Call struct {
	*mock.Call
}

// ListPermissionsByResource is a helper method to define mock.On call
//   - resource *v0.Resource
//   - roleIDs []string
func (_e *Manager_Expecter) ListPermissionsByResource(resource interface{}, roleIDs interface{}) *Manager_ListPermissionsByResource_Call {
	return &Manager_ListPermissionsByResource_Call{Call: _e.mock.On("ListPermissionsByResource", resource, roleIDs)}
}

func (_c *Manager_ListPermissionsByResource_Call) Run(run func(resource *v0.Resource, roleIDs []string)) *Manager_ListPermissionsByResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *v0.Resource
		if args[0] != nil {
			arg0 = args[0].(*v0.Resource)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Manager_ListPermissionsByResource_Call) Return(permissions []*v0.Permission, err error) *Manager_ListPermissionsByResource_Call {
	_c.Call.Return(permissions, err)
	return _c
}

func (_c *Manager_ListPermissionsByResource_Call) RunAndReturn(run func(resource *v0.Resource, roleIDs []string) ([]*v0.Permission, error)) *Manager_ListPermissionsByResource_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoleAssignments provides a mock function for the type Manager
func (_mock *Manager) ListRoleAssignments(accountUUID string) ([]*v0.UserRoleAssignment, error) {
	ret := _mock.Called(accountUUID)

	if len(ret) == 0 {
		panic("no return value specified for ListRoleAssignments")
	}

	var r0 []*v0.UserRoleAssignment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]*v0.UserRoleAssignment, error)); ok {
		return returnFunc(accountUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []*v0.UserRoleAssignment); ok {
		r0 = returnFunc(accountUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v0.UserRoleAssignment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(accountUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Manager_ListRoleAssignments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoleAssignments'
type Manager_ListRoleAssignments_Call struct {
	*mock.Call
}

// ListRoleAssignments is a helper method to define mock.On call
//   - accountUUID string
func (_e *Manager_Expecter) ListRoleAssignments(accountUUID interface{}) *Manager_ListRoleAssignments_Call {
	return &Manager_ListRoleAssignments_Call{Call: _e.mock.On("ListRoleAssignments", accountUUID)}
}

func (_c *Manager_ListRoleAssignments_Call) Run(run func(accountUUID string)) *Manager_ListRoleAssignments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Manager_ListRoleAssignments_Call) Return(userRoleAssignments []*v0.UserRoleAssignment, err error) *Manager_ListRoleAssignments_Call {
	_c.Call.Return(userRoleAssignments, err)
	return _c
}

func (_c *Manager_ListRoleAssignments_Call) RunAndReturn(run func(accountUUID string) ([]*v0.UserRoleAssignment, error)) *Manager_ListRoleAssignments_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoleAssignmentsByRole provides a mock function for the type Manager
func (_mock *Manager) ListRoleAssignmentsByRole(roleID string) ([]*v0.UserRoleAssignment, error) {
	ret := _mock.Called(roleID)

	if len(ret) == 0 {
		panic("no return value specified for ListRoleAssignmentsByRole")
	}

	var r0 []*v0.UserRoleAssignment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]*v0.UserRoleAssignment, error)); ok {
		return returnFunc(roleID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []*v0.UserRoleAssignment); ok {
		r0 = returnFunc(roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v0.UserRoleAssignment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(roleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Manager_ListRoleAssignmentsByRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoleAssignmentsByRole'
type Manager_ListRoleAssignmentsByRole_Call struct {
	*mock.Call
}

// ListRoleAssignmentsByRole is a helper method to define mock.On call
//   - roleID string
func (_e *Manager_Expecter) ListRoleAssignmentsByRole(roleID interface{}) *Manager_ListRoleAssignmentsByRole_Call {
	return &Manager_ListRoleAssignmentsByRole_Call{Call: _e.mock.On("ListRoleAssignmentsByRole", roleID)}
}

func (_c *Manager_ListRoleAssignmentsByRole_Call) Run(run func(roleID string)) *Manager_ListRoleAssignmentsByRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Manager_ListRoleAssignmentsByRole_Call) Return(userRoleAssignments []*v0.UserRoleAssignment, err error) *Manager_ListRoleAssignmentsByRole_Call {
	_c.Call.Return(userRoleAssignments, err)
	return _c
}

func (_c *Manager_ListRoleAssignmentsByRole_Call) RunAndReturn(run func(roleID string) ([]*v0.UserRoleAssignment, error)) *Manager_ListRoleAssignmentsByRole_Call {
	_c.Call.Return(run)
	return _c
}

// ListValues provides a mock function for the type Manager
func (_mock *Manager) ListValues(bundleID string, accountUUID string) ([]*v0.Value, error) {
	ret := _mock.Called(bundleID, accountUUID)

	if len(ret) == 0 {
		panic("no return value specified for ListValues")
	}

	var r0 []*v0.Value
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) ([]*v0.Value, error)); ok {
		return returnFunc(bundleID, accountUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) []*v0.Value); ok {
		r0 = returnFunc(bundleID, accountUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v0.Value)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(bundleID, accountUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Manager_ListValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListValues'
type Manager_ListValues_Call struct {
	*mock.Call
}

// ListValues is a helper method to define mock.On call
//   - bundleID string
//   - accountUUID string
func (_e *Manager_Expecter) ListValues(bundleID interface{}, accountUUID interface{}) *Manager_ListValues_Call {
	return &Manager_ListValues_Call{Call: _e.mock.On("ListValues", bundleID, accountUUID)}
}

func (_c *Manager_ListValues_Call) Run(run func(bundleID string, accountUUID string)) *Manager_ListValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Manager_ListValues_Call) Return(values []*v0.Value, err error) *Manager_ListValues_Call {
	_c.Call.Return(values, err)
	return _c
}

func (_c *Manager_ListValues_Call) RunAndReturn(run func(bundleID string, accountUUID string) ([]*v0.Value, error)) *Manager_ListValues_Call {
	_c.Call.Return(run)
	return _c
}

// ReadBundle provides a mock function for the type Manager
func (_mock *Manager) ReadBundle(bundleID string) (*v0.Bundle, error) {
	ret := _mock.Called(bundleID)

	if len(ret) == 0 {
		panic("no return value specified for ReadBundle")
	}

	var r0 *v0.Bundle
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*v0.Bundle, error)); ok {
		return returnFunc(bundleID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *v0.Bundle); ok {
		r0 = returnFunc(bundleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.Bundle)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(bundleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Manager_ReadBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBundle'
type Manager_ReadBundle_Call struct {
	*mock.Call
}

// ReadBundle is a helper method to define mock.On call
//   - bundleID string
func (_e *Manager_Expecter) ReadBundle(bundleID interface{}) *Manager_ReadBundle_Call {
	return &Manager_ReadBundle_Call{Call: _e.mock.On("ReadBundle", bundleID)}
}

func (_c *Manager_ReadBundle_Call) Run(run func(bundleID string)) *Manager_ReadBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Manager_ReadBundle_Call) Return(bundle *v0.Bundle, err error) *Manager_ReadBundle_Call {
	_c.Call.Return(bundle, err)
	return _c
}

func (_c *Manager_ReadBundle_Call) RunAndReturn(run func(bundleID string) (*v0.Bundle, error)) *Manager_ReadBundle_Call {
	_c.Call.Return(run)
	return _c
}

// ReadPermissionByID provides a mock function for the type Manager
func (_mock *Manager) ReadPermissionByID(permissionID string, roleIDs []string) (*v0.Permission, error) {
	ret := _mock.Called(permissionID, roleIDs)

	if len(ret) == 0 {
		panic("no return value specified for ReadPermissionByID")
	}

	var r0 *v0.Permission
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, []string) (*v0.Permission, error)); ok {
		return returnFunc(permissionID, roleIDs)
	}
	if returnFunc, ok := ret.Get(0).(func(string, []string) *v0.Permission); ok {
		r0 = returnFunc(permissionID, roleIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.Permission)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = returnFunc(permissionID, roleIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Manager_ReadPermissionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadPermissionByID'
type Manager_ReadPermissionByID_Call struct {
	*mock.Call
}

// ReadPermissionByID is a helper method to define mock.On call
//   - permissionID string
//   - roleIDs []string
func (_e *Manager_Expecter) ReadPermissionByID(permissionID interface{}, roleIDs interface{}) *Manager_ReadPermissionByID_Call {
	return &Manager_ReadPermissionByID_Call{Call: _e.mock.On("ReadPermissionByID", permissionID, roleIDs)}
}

func (_c *Manager_ReadPermissionByID_Call) Run(run func(permissionID string, roleIDs []string)) *Manager_ReadPermissionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Manager_ReadPermissionByID_Call) Return(permission *v0.Permission, err error) *Manager_ReadPermissionByID_Call {
	_c.Call.Return(permission, err)
	return _c
}

func (_c *Manager_ReadPermissionByID_Call) RunAndReturn(run func(permissionID string, roleIDs []string) (*v0.Permission, error)) *Manager_ReadPermissionByID_Call {
	_c.Call.Return(run)
	return _c
}

// ReadPermissionByName provides a mock function for the type Manager
func (_mock *Manager) ReadPermissionByName(name string, roleIDs []string) (*v0.Permission, error) {
	ret := _mock.Called(name, roleIDs)

	if len(ret) == 0 {
		panic("no return value specified for ReadPermissionByName")
	}

	var r0 *v0.Permission
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, []string) (*v0.Permission, error)); ok {
		return returnFunc(name, roleIDs)
	}
	if returnFunc, ok := ret.Get(0).(func(string, []string) *v0.Permission); ok {
		r0 = returnFunc(name, roleIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.Permission)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = returnFunc(name, roleIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Manager_ReadPermissionByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadPermissionByName'
type Manager_ReadPermissionByName_Call struct {
	*mock.Call
}

// ReadPermissionByName is a helper method to define mock.On call
//   - name string
//   - roleIDs []string
func (_e *Manager_Expecter) ReadPermissionByName(name interface{}, roleIDs interface{}) *Manager_ReadPermissionByName_Call {
	return &Manager_ReadPermissionByName_Call{Call: _e.mock.On("ReadPermissionByName", name, roleIDs)}
}

func (_c *Manager_ReadPermissionByName_Call) Run(run func(name string, roleIDs []string)) *Manager_ReadPermissionByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Manager_ReadPermissionByName_Call) Return(permission *v0.Permission, err error) *Manager_ReadPermissionByName_Call {
	_c.Call.Return(permission, err)
	return _c
}

func (_c *Manager_ReadPermissionByName_Call) RunAndReturn(run func(name string, roleIDs []string) (*v0.Permission, error)) *Manager_ReadPermissionByName_Call {
	_c.Call.Return(run)
	return _c
}

// ReadSetting provides a mock function for the type Manager
func (_mock *Manager) ReadSetting(settingID string) (*v0.Setting, error) {
	ret := _mock.Called(settingID)

	if len(ret) == 0 {
		panic("no return value specified for ReadSetting")
	}

	var r0 *v0.Setting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*v0.Setting, error)); ok {
		return returnFunc(settingID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *v0.Setting); ok {
		r0 = returnFunc(settingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.Setting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(settingID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Manager_ReadSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadSetting'
type Manager_ReadSetting_Call struct {
	*mock.Call
}

// ReadSetting is a helper method to define mock.On call
//   - settingID string
func (_e *Manager_Expecter) ReadSetting(settingID interface{}) *Manager_ReadSetting_Call {
	return &Manager_ReadSetting_Call{Call: _e.mock.On("ReadSetting", settingID)}
}

func (_c *Manager_ReadSetting_Call) Run(run func(settingID string)) *Manager_ReadSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Manager_ReadSetting_Call) Return(setting *v0.Setting, err error) *Manager_ReadSetting_Call {
	_c.Call.Return(setting, err)
	return _c
}

func (_c *Manager_ReadSetting_Call) RunAndReturn(run func(settingID string) (*v0.Setting, error)) *Manager_ReadSetting_Call {
	_c.Call.Return(run)
	return _c
}

// ReadValue provides a mock function for the type Manager
func (_mock *Manager) ReadValue(valueID string) (*v0.Value, error) {
	ret := _mock.Called(valueID)

	if len(ret) == 0 {
		panic("no return value specified for ReadValue")
	}

	var r0 *v0.Value
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*v0.Value, error)); ok {
		return returnFunc(valueID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *v0.Value); ok {
		r0 = returnFunc(valueID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.Value)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(valueID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Manager_ReadValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadValue'
type Manager_ReadValue_Call struct {
	*mock.Call
}

// ReadValue is a helper method to define mock.On call
//   - valueID string
func (_e *Manager_Expecter) ReadValue(valueID interface{}) *Manager_ReadValue_Call {
	return &Manager_ReadValue_Call{Call: _e.mock.On("ReadValue", valueID)}
}

func (_c *Manager_ReadValue_Call) Run(run func(valueID string)) *Manager_ReadValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Manager_ReadValue_Call) Return(value *v0.Value, err error) *Manager_ReadValue_Call {
	_c.Call.Return(value, err)
	return _c
}

func (_c *Manager_ReadValue_Call) RunAndReturn(run func(valueID string) (*v0.Value, error)) *Manager_ReadValue_Call {
	_c.Call.Return(run)
	return _c
}

// ReadValueByUniqueIdentifiers provides a mock function for the type Manager
func (_mock *Manager) ReadValueByUniqueIdentifiers(accountUUID string, settingID string) (*v0.Value, error) {
	ret := _mock.Called(accountUUID, settingID)

	if len(ret) == 0 {
		panic("no return value specified for ReadValueByUniqueIdentifiers")
	}

	var r0 *v0.Value
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*v0.Value, error)); ok {
		return returnFunc(accountUUID, settingID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *v0.Value); ok {
		r0 = returnFunc(accountUUID, settingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.Value)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(accountUUID, settingID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Manager_ReadValueByUniqueIdentifiers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadValueByUniqueIdentifiers'
type Manager_ReadValueByUniqueIdentifiers_Call struct {
	*mock.Call
}

// ReadValueByUniqueIdentifiers is a helper method to define mock.On call
//   - accountUUID string
//   - settingID string
func (_e *Manager_Expecter) ReadValueByUniqueIdentifiers(accountUUID interface{}, settingID interface{}) *Manager_ReadValueByUniqueIdentifiers_Call {
	return &Manager_ReadValueByUniqueIdentifiers_Call{Call: _e.mock.On("ReadValueByUniqueIdentifiers", accountUUID, settingID)}
}

func (_c *Manager_ReadValueByUniqueIdentifiers_Call) Run(run func(accountUUID string, settingID string)) *Manager_ReadValueByUniqueIdentifiers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Manager_ReadValueByUniqueIdentifiers_Call) Return(value *v0.Value, err error) *Manager_ReadValueByUniqueIdentifiers_Call {
	_c.Call.Return(value, err)
	return _c
}

func (_c *Manager_ReadValueByUniqueIdentifiers_Call) RunAndReturn(run func(accountUUID string, settingID string) (*v0.Value, error)) *Manager_ReadValueByUniqueIdentifiers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRoleAssignment provides a mock function for the type Manager
func (_mock *Manager) RemoveRoleAssignment(assignmentID string) error {
	ret := _mock.Called(assignmentID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRoleAssignment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(assignmentID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Manager_RemoveRoleAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRoleAssignment'
type Manager_RemoveRoleAssignment_Call struct {
	*mock.Call
}

// RemoveRoleAssignment is a helper method to define mock.On call
//   - assignmentID string
func (_e *Manager_Expecter) RemoveRoleAssignment(assignmentID interface{}) *Manager_RemoveRoleAssignment_Call {
	return &Manager_RemoveRoleAssignment_Call{Call: _e.mock.On("RemoveRoleAssignment", assignmentID)}
}

func (_c *Manager_RemoveRoleAssignment_Call) Run(run func(assignmentID string)) *Manager_RemoveRoleAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Manager_RemoveRoleAssignment_Call) Return(err error) *Manager_RemoveRoleAssignment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Manager_RemoveRoleAssignment_Call) RunAndReturn(run func(assignmentID string) error) *Manager_RemoveRoleAssignment_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveSettingFromBundle provides a mock function for the type Manager
func (_mock *Manager) RemoveSettingFromBundle(bundleID string, settingID string) error {
	ret := _mock.Called(bundleID, settingID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveSettingFromBundle")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(bundleID, settingID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Manager_RemoveSettingFromBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveSettingFromBundle'
type Manager_RemoveSettingFromBundle_Call struct {
	*mock.Call
}

// RemoveSettingFromBundle is a helper method to define mock.On call
//   - bundleID string
//   - settingID string
func (_e *Manager_Expecter) RemoveSettingFromBundle(bundleID interface{}, settingID interface{}) *Manager_RemoveSettingFromBundle_Call {
	return &Manager_RemoveSettingFromBundle_Call{Call: _e.mock.On("RemoveSettingFromBundle", bundleID, settingID)}
}

func (_c *Manager_RemoveSettingFromBundle_Call) Run(run func(bundleID string, settingID string)) *Manager_RemoveSettingFromBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Manager_RemoveSettingFromBundle_Call) Return(err error) *Manager_RemoveSettingFromBundle_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Manager_RemoveSettingFromBundle_Call) RunAndReturn(run func(bundleID string, settingID string) error) *Manager_RemoveSettingFromBundle_Call {
	_c.Call.Return(run)
	return _c
}

// WriteBundle provides a mock function for the type Manager
func (_mock *Manager) WriteBundle(bundle *v0.Bundle) (*v0.Bundle, error) {
	ret := _mock.Called(bundle)

	if len(ret) == 0 {
		panic("no return value specified for WriteBundle")
	}

	var r0 *v0.Bundle
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*v0.Bundle) (*v0.Bundle, error)); ok {
		return returnFunc(bundle)
	}
	if returnFunc, ok := ret.Get(0).(func(*v0.Bundle) *v0.Bundle); ok {
		r0 = returnFunc(bundle)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.Bundle)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*v0.Bundle) error); ok {
		r1 = returnFunc(bundle)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Manager_WriteBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteBundle'
type Manager_WriteBundle_Call struct {
	*mock.Call
}

// WriteBundle is a helper method to define mock.On call
//   - bundle *v0.Bundle
func (_e *Manager_Expecter) WriteBundle(bundle interface{}) *Manager_WriteBundle_Call {
	return &Manager_WriteBundle_Call{Call: _e.mock.On("WriteBundle", bundle)}
}

func (_c *Manager_WriteBundle_Call) Run(run func(bundle *v0.Bundle)) *Manager_WriteBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *v0.Bundle
		if args[0] != nil {
			arg0 = args[0].(*v0.Bundle)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Manager_WriteBundle_Call) Return(bundle1 *v0.Bundle, err error) *Manager_WriteBundle_Call {
	_c.Call.Return(bundle1, err)
	return _c
}

func (_c *Manager_WriteBundle_Call) RunAndReturn(run func(bundle *v0.Bundle) (*v0.Bundle, error)) *Manager_WriteBundle_Call {
	_c.Call.Return(run)
	return _c
}

// WriteRoleAssignment provides a mock function for the type Manager
func (_mock *Manager) WriteRoleAssignment(accountUUID string, roleID string) (*v0.UserRoleAssignment, error) {
	ret := _mock.Called(accountUUID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for WriteRoleAssignment")
	}

	var r0 *v0.UserRoleAssignment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*v0.UserRoleAssignment, error)); ok {
		return returnFunc(accountUUID, roleID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *v0.UserRoleAssignment); ok {
		r0 = returnFunc(accountUUID, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.UserRoleAssignment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(accountUUID, roleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Manager_WriteRoleAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteRoleAssignment'
type Manager_WriteRoleAssignment_Call struct {
	*mock.Call
}

// WriteRoleAssignment is a helper method to define mock.On call
//   - accountUUID string
//   - roleID string
func (_e *Manager_Expecter) WriteRoleAssignment(accountUUID interface{}, roleID interface{}) *Manager_WriteRoleAssignment_Call {
	return &Manager_WriteRoleAssignment_Call{Call: _e.mock.On("WriteRoleAssignment", accountUUID, roleID)}
}

func (_c *Manager_WriteRoleAssignment_Call) Run(run func(accountUUID string, roleID string)) *Manager_WriteRoleAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Manager_WriteRoleAssignment_Call) Return(userRoleAssignment *v0.UserRoleAssignment, err error) *Manager_WriteRoleAssignment_Call {
	_c.Call.Return(userRoleAssignment, err)
	return _c
}

func (_c *Manager_WriteRoleAssignment_Call) RunAndReturn(run func(accountUUID string, roleID string) (*v0.UserRoleAssignment, error)) *Manager_WriteRoleAssignment_Call {
	_c.Call.Return(run)
	return _c
}

// WriteValue provides a mock function for the type Manager
func (_mock *Manager) WriteValue(value *v0.Value) (*v0.Value, error) {
	ret := _mock.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for WriteValue")
	}

	var r0 *v0.Value
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*v0.Value) (*v0.Value, error)); ok {
		return returnFunc(value)
	}
	if returnFunc, ok := ret.Get(0).(func(*v0.Value) *v0.Value); ok {
		r0 = returnFunc(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.Value)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*v0.Value) error); ok {
		r1 = returnFunc(value)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Manager_WriteValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteValue'
type Manager_WriteValue_Call struct {
	*mock.Call
}

// WriteValue is a helper method to define mock.On call
//   - value *v0.Value
func (_e *Manager_Expecter) WriteValue(value interface{}) *Manager_WriteValue_Call {
	return &Manager_WriteValue_Call{Call: _e.mock.On("WriteValue", value)}
}

func (_c *Manager_WriteValue_Call) Run(run func(value *v0.Value)) *Manager_WriteValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *v0.Value
		if args[0] != nil {
			arg0 = args[0].(*v0.Value)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Manager_WriteValue_Call) Return(value1 *v0.Value, err error) *Manager_WriteValue_Call {
	_c.Call.Return(value1, err)
	return _c
}

func (_c *Manager_WriteValue_Call) RunAndReturn(run func(value *v0.Value) (*v0.Value, error)) *Manager_WriteValue_Call {
	_c.Call.Return(run)
	return _c
}
